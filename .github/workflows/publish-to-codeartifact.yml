name: Publish to AWS CodeArtifact

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Debug OIDC claims
        run: |
          echo "GitHub repository: ${{ github.repository }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "GitHub actor: ${{ github.actor }}"
          echo "GitHub event name: ${{ github.event_name }}"
          echo "GitHub token subject format: repo:${{ github.repository }}:ref:${{ github.ref }}"

      - name: Determine version
        id: determine_version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # If this is a tag push, use the tag name without the 'v' prefix
            VERSION=$(echo ${{ github.ref }} | sed 's|refs/tags/v||')
          else
            # For non-tag pushes, use the short commit hash
            SHORT_SHA=$(git rev-parse --short HEAD)
            VERSION="0.0.0-${SHORT_SHA}"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Determined version: ${VERSION}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}
          role-duration-seconds: 900
          debug-logging: true

      - name: Get CodeArtifact token
        run: |
          CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token \
            --domain ${{ vars.CODEARTIFACT_DOMAIN }} \
            --domain-owner ${{ vars.AWS_ACCOUNT_ID }} \
            --query authorizationToken \
            --output text)
          echo "CODEARTIFACT_AUTH_TOKEN=${CODEARTIFACT_AUTH_TOKEN}" >> $GITHUB_ENV
          
          CODEARTIFACT_REPOSITORY_URL=$(aws codeartifact get-repository-endpoint \
            --domain ${{ vars.CODEARTIFACT_DOMAIN }} \
            --repository ${{ vars.CODEARTIFACT_REPOSITORY }} \
            --format maven \
            --query repositoryEndpoint \
            --output text)
          echo "CODEARTIFACT_REPOSITORY_URL=${CODEARTIFACT_REPOSITORY_URL}" >> $GITHUB_ENV

      - name: Build with Gradle
        run: |
          ./gradlew clean build -Pversion=${VERSION}

      - name: Publish to AWS CodeArtifact
        run: |
          ./gradlew publishAllToCodeArtifact -Pversion=${VERSION}
        env:
          CODEARTIFACT_AUTH_TOKEN: ${{ env.CODEARTIFACT_AUTH_TOKEN }}
          CODEARTIFACT_REPOSITORY_URL: ${{ env.CODEARTIFACT_REPOSITORY_URL }}

  debug-oidc:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Get GitHub OIDC token subject
        id: get_oidc_subject
        run: |
          ACTIONS_ID_TOKEN_REQUEST_URL=${{ env.ACTIONS_ID_TOKEN_REQUEST_URL }}
          ACTIONS_ID_TOKEN_REQUEST_TOKEN=${{ env.ACTIONS_ID_TOKEN_REQUEST_TOKEN }}
          
          if [ -n "$ACTIONS_ID_TOKEN_REQUEST_URL" ] && [ -n "$ACTIONS_ID_TOKEN_REQUEST_TOKEN" ]; then
            TOKEN_RESPONSE=$(curl -s -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sts.amazonaws.com")
            echo "Token response received"
            
            # Extract the token
            ID_TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.value')
            
            # Decode the token payload (second part)
            PAYLOAD=$(echo $ID_TOKEN | cut -d. -f2)
            
            # Add padding if needed
            PAYLOAD_PADDED=$(echo $PAYLOAD | sed 's/-/+/g' | sed 's/_/\//g')
            REMAINDER=$((${#PAYLOAD_PADDED} % 4))
            if [ $REMAINDER -eq 2 ]; then
              PAYLOAD_PADDED="${PAYLOAD_PADDED}=="
            elif [ $REMAINDER -eq 3 ]; then
              PAYLOAD_PADDED="${PAYLOAD_PADDED}="
            fi
            
            # Decode and extract the sub claim
            DECODED=$(echo $PAYLOAD_PADDED | base64 -d 2>/dev/null || echo $PAYLOAD_PADDED | base64 -D)
            SUB=$(echo $DECODED | jq -r '.sub')
            
            echo "OIDC token subject: $SUB"
            echo "FULL_TOKEN_PAYLOAD=$DECODED" >> $GITHUB_ENV
          else
            echo "OIDC token request environment variables not available"
          fi