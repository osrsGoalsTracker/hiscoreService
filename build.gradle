plugins {
    id 'java'
    id 'io.freefair.lombok' version '8.4'
    id 'checkstyle'
    id 'jvm-test-suite'
    id 'maven-publish'  // Add maven-publish plugin for publishing to CodeArtifact
}

group = 'com.osrsGoalTracker'
// Use project property for version if provided, otherwise use default
version = project.hasProperty('version') ? project.getProperty('version') : '1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21

    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
    mavenLocal()  // Check local Maven repository first
    maven { url 'https://jitpack.io' }
    
    // Add CodeArtifact repository if credentials are available
    if (System.getenv('CODEARTIFACT_REPOSITORY_URL') != null) {
        maven {
            name = "CodeArtifact"
            url = System.getenv('CODEARTIFACT_REPOSITORY_URL')
            credentials {
                username = "aws"
                password = System.getenv('CODEARTIFACT_AUTH_TOKEN')
            }
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all {
        resolutionStrategy {
            force 'com.google.guava:guava:33.0.0-jre'
            exclude group: 'com.google.collections', module: 'google-collections'
        }
    }
}

dependencies {
    // AWS DynamoDB
    implementation platform('software.amazon.awssdk:bom:2.24.0')
    implementation 'software.amazon.awssdk:dynamodb'
    implementation 'software.amazon.awssdk:dynamodb-enhanced'
    
    // AWS Lambda
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.3'
    implementation 'com.amazonaws:aws-lambda-java-events:3.11.4'
    implementation 'software.amazon.awssdk:dynamodb:2.21.0'
    implementation 'software.amazon.awssdk:dynamodb-enhanced:2.21.0'
    
    // Guice
    implementation 'com.google.inject:guice:7.0.0'
    implementation 'javax.inject:javax.inject:1'
    
    // Jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.0'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.16.0'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.16.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.16.0'
    
    // Log4j2
    implementation 'org.apache.logging.log4j:log4j-core:2.22.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.22.0'
    
    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testImplementation 'org.mockito:mockito-core:5.5.0'
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

    // Orchestration Service - Use local project if available, otherwise use JitPack
    implementation 'com.github.osrsGoalsTracker:osrs-hiscores:v2.0.0'
}

testing {
    suites {
        test {
            useJUnitJupiter()
            dependencies {
                implementation platform('org.junit:junit-bom:5.10.1')
                implementation 'org.junit.jupiter:junit-jupiter'
                implementation 'org.mockito:mockito-core:5.8.0'
                implementation 'org.mockito:mockito-junit-jupiter:5.8.0'
                implementation 'net.bytebuddy:byte-buddy:1.14.10'
                implementation 'net.bytebuddy:byte-buddy-agent:1.14.10'
            }
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
        showExceptions = true
        showCauses = true
        showStackTraces = true
    }
}

// Base Checkstyle configuration
checkstyle {
    toolVersion = '10.13.0'
    maxWarnings = 0
    ignoreFailures = false
    showViolations = true
}

// Create a task for the remote checkstyle
task remoteCheckstyle(type: Checkstyle) {
    description = 'Runs checkstyle against remote organization rules'
    group = 'verification'
    source 'src/main/java'
    include '**/*.java'
    classpath = files()
    config = resources.text.fromUri("https://raw.githubusercontent.com/osrsGoalsTracker/java-build-config/refs/heads/main/checkstyle/checkstyle.xml")
}

// Create a task for the layered architecture checkstyle
task layeredArchitectureCheckstyle(type: Checkstyle) {
    description = 'Runs checkstyle against local layered architecture rules'
    group = 'verification'
    source 'src/main/java'
    include '**/*.java'
    classpath = files()
    configFile = file("${project.rootDir}/config/checkstyle/layered-architecture.xml")
    configDirectory = file("${project.rootDir}/config/checkstyle")
}

// Configure all checkstyle tasks
tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = true
        html.required = true
    }
    exclude '**/build/**'
    exclude '**/generated/**'
    exclude '**/target/**'
}

// Disable the default checkstyle tasks
tasks.named('checkstyleMain').configure {
    enabled = false
}

tasks.named('checkstyleTest').configure {
    enabled = false
}

// Create a new task to run both checkstyle configurations
task allCheckstyle(group: 'verification') {
    description = 'Runs all checkstyle checks'
    dependsOn remoteCheckstyle, layeredArchitectureCheckstyle
}

// Make the check task depend on our custom checkstyle task
check.dependsOn allCheckstyle

// Git hooks configuration
task checkGitHooks {
    doLast {
        def projectDir = project.projectDir
        def hookFile = new File(projectDir, '.git/hooks/pre-push')
        def installScript = new File(projectDir, 'scripts/install-hooks.sh')

        if (!hookFile.exists() || !hookFile.canExecute()) {
            println "Git hooks not found or not executable. Installing them now..."

            if (!installScript.exists()) {
                throw new GradleException("Cannot find scripts/install-hooks.sh")
            }

            // Make the install script executable
            installScript.setExecutable(true)

            // Execute the install script
            def result = exec {
                workingDir projectDir
                commandLine 'sh', installScript.absolutePath
                ignoreExitValue = true
            }

            if (result.exitValue != 0) {
                throw new GradleException("Failed to install git hooks")
            }
        }
    }
}

// Lambda handler configurations
def lambdaHandlers = [
    'getCharacterHiscores': [
        handler: 'com.osrsGoalTracker.hiscore.handler.GetCharacterHiscoresHandler',
        description: 'Handler for retrieving player statistics from OSRS hiscores'
    ]
    // New handlers will be automatically detected and published
]

// Create tasks for each Lambda handler (uber/fat jars with all dependencies)
def handlerTasks = []
lambdaHandlers.each { name, config ->
    def taskName = "${name}Lambda"
    handlerTasks << taskName
    tasks.register(taskName, Jar) {
        archiveBaseName = "${name}-lambda"
        archiveVersion = project.version
        archiveClassifier = null
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE

        manifest {
            attributes(
                'Main-Class': config.handler,
                'Description': config.description
            )
        }
        
        from sourceSets.main.output
        dependsOn configurations.runtimeClasspath
        from {
            configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }
}

// Task to build all handlers
task buildAllHandlers {
    description = 'Builds all Lambda handlers'
    group = 'build'
    dependsOn handlerTasks
}

// Service JAR task (uber/fat jar with all dependencies)
task serviceJar(type: Jar) {
    archiveBaseName = "hiscore-service"
    archiveVersion = project.version
    archiveClassifier = null
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    manifest {
        attributes(
            'Implementation-Title': 'OSRS Hiscore Service',
            'Implementation-Version': project.version
        )
    }
    
    from sourceSets.main.output
    exclude '**/handler/**'  // Exclude handlers from the service JAR
    
    // Include all dependencies to make it a fat/uber jar
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// Configure publishing for the service JAR
publishing {
    publications {
        // Latest version publication for service
        hiscoreServiceLatestUberjar(MavenPublication) {
            artifactId = 'hiscore-service'
            version = 'latest'
            artifact serviceJar
            
            pom {
                name = 'hiscore-service'
                description = 'Uberjar containing all dependencies for the hiscore service'
                groupId = 'com.osrsGoalTracker'
            }
        }
        
        // Create publications for each Lambda handler uberjar
        lambdaHandlers.each { name, config ->
            def handlerTask = tasks.named("${name}Lambda").get()
            
            // Latest version publication for each handler
            "${name}LatestUberjar"(MavenPublication) {
                artifactId = "${name}"
                version = 'latest'
                artifact handlerTask
                
                pom {
                    name = "${name}"
                    description = config.description
                    groupId = 'com.osrsGoalTracker'
                }
            }
        }
    }

    repositories {
        // Configure CodeArtifact repository for publishing
        if (System.getenv('CODEARTIFACT_REPOSITORY_URL') != null) {
            maven {
                name = 'CodeArtifact'
                url = System.getenv('CODEARTIFACT_REPOSITORY_URL')
                credentials {
                    username = "aws"
                    password = System.getenv('CODEARTIFACT_AUTH_TOKEN')
                }
            }
        }
    }
}

// Task to publish all artifacts to CodeArtifact
task publishAllToCodeArtifact {
    description = 'Publishes all artifacts to AWS CodeArtifact'
    group = 'publishing'
    
    // Depend on all publish tasks
    dependsOn tasks.withType(PublishToMavenRepository).matching { 
        it.repository == publishing.repositories.findByName('CodeArtifact') 
    }
}

// Task to publish latest tag
task publishLatest {
    description = 'Publishes artifacts with latest tag to AWS CodeArtifact'
    group = 'publishing'
    
    doLast {
        def version = project.version
        def group = project.group
        
        // Publish latest tag for service
        exec {
            commandLine 'aws', 'codeartifact', 'put-package-version-status',
                '--domain', System.getenv('CODEARTIFACT_DOMAIN'),
                '--domain-owner', System.getenv('CODEARTIFACT_DOMAIN_OWNER'),
                '--repository', System.getenv('CODEARTIFACT_REPOSITORY'),
                '--format', 'maven',
                '--namespace', 'com.osrsGoalTracker',
                '--package', 'hiscore-service',
                '--version', version,
                '--status', 'Latest'
        }
        
        // Publish latest tag for each lambda handler
        lambdaHandlers.each { name, config ->
            exec {
                commandLine 'aws', 'codeartifact', 'put-package-version-status',
                    '--domain', System.getenv('CODEARTIFACT_DOMAIN'),
                    '--domain-owner', System.getenv('CODEARTIFACT_DOMAIN_OWNER'),
                    '--repository', System.getenv('CODEARTIFACT_REPOSITORY'),
                    '--format', 'maven',
                    '--namespace', 'com.osrsGoalTracker',
                    '--package', "${name}-lambda",
                    '--version', version,
                    '--status', 'Latest'
            }
        }
    }
}

// Make publishLatest depend on publishAllToCodeArtifact
publishLatest.dependsOn publishAllToCodeArtifact

// Automatically detect new handlers in the handler package
task detectHandlers {
    description = 'Detects new handlers in the handler package'
    group = 'build'
    
    doLast {
        def handlerDir = new File("${projectDir}/src/main/java/com/osrsGoalTracker/hiscore/handler")
        if (handlerDir.exists()) {
            handlerDir.eachFile { file ->
                if (file.name.endsWith('Handler.java')) {
                    def handlerName = file.name.replace('Handler.java', '')
                    def camelCaseName = handlerName[0].toLowerCase() + handlerName.substring(1)
                    
                    if (!lambdaHandlers.containsKey(camelCaseName)) {
                        println "Detected new handler: ${handlerName}"
                        lambdaHandlers[camelCaseName] = [
                            handler: "com.osrsGoalTracker.hiscore.handler.${handlerName}",
                            description: "Handler for ${camelCaseName}"
                        ]
                    }
                }
            }
        }
    }
}

// Make sure detectHandlers runs before buildAllHandlers
buildAllHandlers.dependsOn detectHandlers

// Make sure the build task depends on buildAllHandlers and serviceJar
build.dependsOn buildAllHandlers, serviceJar
